class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int prefixMax[] = new int[n];
        int suffixMax[] = new int[n];

        prefixMax[0] = height[0]; //as 1st element is maximum as it is compared to itself
        for(int i = 1; i < n; i++){
            prefixMax[i] = Math.max(prefixMax[i-1],height[i]);
        }

        suffixMax[n-1] = height[n-1];  //as last element is compared to itself so it is maximum.
        for(int i = n-2; i >= 0; i--){
            suffixMax[i] = Math.max(suffixMax[i+1],height[i]);
        }

        int amount = 0;
        for(int i = 1; i <= n-2; i++){
            int leftBlockade = prefixMax[i-1];
            int rightBlockade = suffixMax[i+1];
            int yourBlockade = Math.min(leftBlockade,rightBlockade);
            int contri = yourBlockade - height[i];
            if(contri>0){
                amount = amount + contri;
            }
        }

        return amount;

    }
}

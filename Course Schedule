link : https://leetcode.com/problems/course-schedule/description/

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites){
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0; i < numCourses; i++){
            graph.add(new ArrayList<>());
        }
        
        int indegree[] = new int[numCourses];
        
        for(int i = 0; i < prerequisites.length; i++){
            int u = prerequisites[i][0];
            int v = prerequisites[i][1];
            //graph.get(u).add(v);
            graph.get(v).add(u);
            // indegree[u]++;
        }
        
        for(int i = 0; i < numCourses; i++){
            List <Integer> nbrs = graph.get(i);
            for(int v:nbrs){
                indegree[v]++;
            }
        }
        int count = 0;
        Queue<Integer> q = new LinkedList<>();

        for(int i = 0; i < numCourses; i++){
            if(indegree[i] == 0){
                q.add(i);
                count++;
            }
        }

        while(q.size()>0){
            int rem = q.remove();
            List <Integer> nbrs = graph.get(rem);
            for(int v:nbrs){
                indegree[v]--;
                if(indegree[v]==0){
                    q.add(v);
                    count++;
                }
            }
            
        }

        if(count==numCourses){ //means no cycle, topological order exists
            return true;
        }
        return false;
        
    }
}

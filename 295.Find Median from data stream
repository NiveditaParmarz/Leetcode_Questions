The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.

For example, for arr = [2,3,4], the median is 3.
For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.
Implement the MedianFinder class:

MedianFinder() initializes the MedianFinder object.
void addNum(int num) adds the integer num from the data stream to the data structure.
double findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.


Code:
class MedianFinder {
    PriorityQueue<Integer> left = new PriorityQueue<>(Collections.reverseOrder()); //max heap
        
    PriorityQueue<Integer> right = new PriorityQueue<>();

    public MedianFinder() {
        
    }
    
    public void addNum(int num){
        if(left.size()==right.size()){ //odd th element is added (index is odd)
            //we have to add the oddTh element in left bucket but first add in right so that we check if the element is smaller than elements in right or not
            right.add(num);
            left.add(right.remove());  //we ultimately added the oddTh element in left bucket only, but after checking with right ka least element
        }  
        else{ //evenTh element (index of element is even)
            //we have to add the evenTh element in right bucket
            left.add(num);
            right.add(left.remove()); //adding left ka max element in right to ensure that the right bucket stays greater than left bucket.
        }      
    }
    
    public double findMedian(){ 
        if(left.size()==right.size()){  //this means that we have to find the median for even length
            return ((left.peek()+right.peek())/2.0);
        }
        else{ //odd length            
            return left.peek()/1.0; //to convert it into a double
        }
        
    }
}

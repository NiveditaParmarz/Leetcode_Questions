Question:
Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].
Input: root = [10,5,15,3,7,null,18], low = 7, high = 15
Output: 32
Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.

Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10
Output: 23
Explanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23.

--------------------
Link: https://leetcode.com/problems/range-sum-of-bst/description/
--------------------

Code:
class Solution {
    int sum = 0;

    public int rangeSumBST(TreeNode root, int low, int high) {
        // sum = 0; // Reset sum before each function call
        helper(root, low, high);
        return sum;
    }

    public void helper(TreeNode root, int low, int high) {
        if (root == null) return;

        if (root.val >= low && root.val <= high) {
            sum += root.val;
        }

        if (root.val > low) helper(root.left, low, high);
        if (root.val < high) helper(root.right, low, high);
    }
     
}
